devtools::use_vignette("my-vignette")
devtools::load_all()
install.packages("easyGgplot2")
library(easyGgplot2)
devtools::load_all()
install.packages("gridExtra")
devtools::load_all()
install.packages("plotly")
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=2)
fig.show = 'asis'
library(RDscope)
library(waferscopeR)
native_oxide <- system.file("extdata", "native_oxide.csv", package="waferscopeR")
lot1 <- read.kla_f5(native_oxide)
library(waferscopeR)
native_oxide <- system.file("extdata", "native_oxide.csv", package="waferscopeR")
lot1 <- read_kla_f5(native_oxide)
#Wafer names in the list
names(lot1)
#Retrieve by wafer index and return as dataframe
head(lot1[[1]])
#Retrieve by slot name and return as dataframe
head(lot1[["slot1"]])
#read slot1 from collection and change the col name of "1st Thickness" to "ThK"
wafer.slot1 <-lot1[["slot1"]]
colnames(wafer.slot1) <- c("ThK","GOF","X","Y")
# Output the statis of wafer
wafer_stat(wafer = wafer.slot1)
wafer.slot1 <-lot1[["slot1"]]
colnames(wafer.slot1) <- c("ThK","GOF","X","Y")
#Visualize mean map with datapoints on
map_wafer(wafer=wafer.slot1,resolution="normal",point="on",maps="mean", wlabel = "slot1")
library(ggplot2)
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=2)
fig.show = 'asis'
wafer.slot1 <-lot1[["slot1"]]
colnames(wafer.slot1) <- c("ThK","GOF","X","Y")
#Visualize mean map with datapoints on
map_wafer(wafer=wafer.slot1,resolution="normal",point="on",maps="mean", wlabel = "slot1")
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=2)
fig.show = 'asis'
wafer.slot1 <-lot1[["slot1"]]
colnames(wafer.slot1) <- c("ThK","GOF","X","Y")
#Visualize mean map with datapoints on
map_wafer(wafer=wafer.slot1,resolution="normal",point="on",maps="mean", wlabel = "slot1")
library(waferscopeR)
native_oxide <- system.file("extdata", "native_oxide.csv", package="waferscopeR")
lot1 <- read_kla_f5(native_oxide)
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=2)
fig.show = 'asis'
wafer.slot1 <-lot1[["slot1"]]
colnames(wafer.slot1) <- c("ThK","GOF","X","Y")
#Visualize mean map with datapoints on
map_wafer(wafer=wafer.slot1,resolution="normal",point="on",maps="mean", wlabel = "slot1")
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=2)
fig.show = 'asis'
wafer.slot1 <-lot1[["slot1"]]
colnames(wafer.slot1) <- c("ThK","GOF","X","Y")
#Visualize mean map with datapoints on
map_wafer(wafer=wafer.slot1,resolution="normal",point="on",maps="mean", wlabel = "slot1")
wafer.slot1 <-lot1[["slot1"]]
colnames(wafer.slot1) <- c("ThK","GOF","X","Y")
#Visualize mean map, radial, residual and radial distribution maps
map_wafer(wafer=wafer.slot1,resolution="normal",point="off",maps="all")
#decompose into different points
map_decompose(wafer=wafer.slot1,resolution="normal",point="off",maps="decompose")
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=2)
fig.show = 'asis'
pre <- system.file("extdata", "pre.csv", package="waferscopeR")
post <- system.file("extdata", "post.csv", package="waferscopeR")
explore_lot_klaraw(pre,post)
explore_klaraw(pre,output="summary")
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=2)
fig.show = 'asis'
explore_klaraw(pre,output="summary")
devtools::load_all()
knitr::opts_chunk$set(
root.dir = normalizePath('../'),
fig.width = 6, fig.height = 6
)
options(digits=3)
fig.show = 'asis'
explore_klaraw(pre,output="summary")
#read wafer collection data from tabulated csv file
wafer_collection <- system.file("extdata", "wafer_collection.csv", package="waferscopeR")
wafer.collection1 <- read.csv(wafer_collection)
#select slot1 from the collection and name z to "ThK"
wafer1 <- wafer.collection1[, 1:3]
wafer2<-wafer.collection1[, c(1,2,4)]
waferscopeR::compare_wafer(wafer1,wafer2, output="delta")
#read wafer collection data from tabulated csv file
wafer.collection1 <- read.csv(wafer_collection)
#select slot1 from the collection and name z to "ThK"
wafer1 <- wafer.collection1[, 1:3]
wafer2<-wafer.collection1[, c(1,2,4)]
waferscopeR::compare_wafer(wafer1,wafer2, output="compare")
library(waferscopeR)
library(waferscopeR)
library(waferscopeR)
devtools::document()
devtools::use_testthat()
search()
devtools::document()
devtools::document()
devtools::check()
library(ggplot2)
library(waferscopeR)
devtools::check()
search()
